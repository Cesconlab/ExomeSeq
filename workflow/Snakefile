# this container defines the underlying OS for each job when using the workflow
# with --use-conda --use-singularity
#container: "docker://continuumio/miniconda3"

configfile: "config/config.yaml"

import pandas as pd
import os

samples = pd.read_table(
    config["sample_file"]
).set_index(
    "sample", drop=False
)

indel_vcfs = pd.read_table(
    config["indel_vcf"]
,dtype={'indel': object}).set_index(
    "indel", drop=False
)

snv_vcfs = pd.read_table(
    config["snv_vcf"]
,dtype={'snv': object}).set_index(
    "snv", drop=False
)

output_dir = os.environ.get("output_dir")
workdir: "/cluster/home/selghamr/workflows/intialize/ExomeSeq/"

known_mills="ref/Mills_and_1000G_gold_standard.indels.hg38.vcf"
known_1000G="ref/1000G_phase1.indels.hg19.vcf"
region="resources/TargetRegions/S04380110_Covered.headless.bed"
dbsnp="ref/dbsnp_144.hg38.vcf "
ref_genome="hg38"

#workdir: "/cluster/projects/mcgahalab/data/mcgahalab/wither_mcgaha_ram/snakemake_workflow/"


##### load rules #####
#include: "rules/common.smk"
include: "rules/align.smk"
include: "rules/haplogatk.smk"
include: "rules/mutect2.smk"
include: "rules/mutect1.smk"
include: "rules/varscan.smk"
include: "rules/Strelka.smk"
include: "rules/Sequenza.smk"
include: "rules/vcfIntersectSNV.smk"


##### target rules #####
rule all:
  input:
    expand("{output_dir}/alignment/{sample}/{sample}.realigned.recal.bam", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/Haplotype/{sample}/{sample}.raw.snps.indels.vcf", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/MuTect1/{sample}/{sample}.mut1.vcf", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/MuTect1/{sample}/{sample}.call_stats", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/MuTect1/{sample}/{sample}.wig.txt", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/MuTect2/{sample}/{sample}_{interval}.mut2.vcf", sample = samples["sample"] ,output_dir=output_dir, interval=intervals["interval"]),
    expand("{output_dir}/MuTect2Merge/{sample}/{sample}_merged_mut2.vcf", sample = samples["sample"] ,output_dir=output_dir),
    expand("{output_dir}/MuTect2Merge/{sample}/{sample}.snvs.recode.vcf", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/MuTect2Merge/{sample}/{sample}.indels.recode.vcf", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/Sequenza/{sample}", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/Strelka/{sample}/{sample}.myAnalysis", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/Varscan/cnv/{sample}/{sample}.vscn.copynumber", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/Varscan/snv/{sample}/{sample}.snp", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/Varscan/snv/{sample}/{sample}.indel", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/Varscan/snv/{sample}/{sample}.snp.Somatic.hc", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/Varscan/snv/{sample}/{sample}.indel.Somatic.hc", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/vcfIntersect/{sample}_intersect_snv", sample = samples["sample"], output_dir=output_dir),
    expand("{output_dir}/MAF_38_f/indel/{sample}/{indel}.maf", sample = samples["sample"], output_dir=output_dir, indel=indel_vcfs["indel"]),
    expand("{output_dir}/MAF_38_final/snv/{sample}/{snv}.maf", sample = samples["sample"], output_dir=output_dir, snv=snv_vcfs["snv"]),
