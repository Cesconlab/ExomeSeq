# this container defines the underlying OS for each job when using the workflow
# with --use-conda --use-singularity
#container: "docker://continuumio/miniconda3"
configfile: "config.yaml"

import pandas as pd
import os

samples = pd.read_table(
    config["sample_file"]
).set_index(
    "sample", drop=False
)

output_dir = os.environ.get("output_dir")

known_mills="/cluster/tools/data/genomes/human/hg19/variantcallingdata/Mills_and_1000G_gold_standard.indels.hg19.vcf"
known_1000G="/cluster/tools/data/genomes/human/hg19/variantcallingdata/1000G_phase1.indels.hg19.vcf"
region="/cluster/projects/hakemgroup/pipelines/RNAseq-Exome-snakemake/Snakemake/exome/step1/S04380110_Covered.headless.bed"
dbsnp="/cluster/tools/data/genomes/human/hg19/variantcallingdata/dbsnp_138.hg19.vcf"
ref_genome="hg19"

#workdir: "/cluster/projects/mcgahalab/data/mcgahalab/wither_mcgaha_ram/snakemake_workflow/"
workdir: "/cluster/home/quever/workflows/rnaseq_test/"

##### load rules #####
include: "rules/common.smk"
include: "rules/mapFASTQ.smk"
include: "rules/align.smk"
include: "rules/mutect2.smk"
include: "rules/diffexp.smk"
include: "rules/genotyping.smk"


##### target rules #####

def get_r1(wildcards):
    return samples.read1[wildcards.sample]

def get_r2(wildcards):
    return samples.read2[wildcards.sample]

rule all:
    input: expand("{output_dir}/alignment/{sample}/{sample}.realigned.recal.bam", sample = samples["sample"], output_dir=output_dir),
    params:
        runtime="120:00:00"
    threads: 1
    resources: mem_mb=6000
    shell:
     """
     module load igenome-human/hg19
     """


rule all:
    input:
        "results/pca.svg",
        #"../report/diffexp.rst",
        "results/deseq2/normcounts.tsv",
        "results/counts/all.tsv",
        expand("results/star/se/{sample}-merged/Aligned.sortedByCoord.out.bam", sample=samples.index),
        "results/qc/multiqc_report.html",
        expand("results/genotyping/{sample}-merged.allelicCounts.tsv", sample=samples.index),

        #expand("results/trimmed/{sample}_merged_single.fastq.gz", sample=samples.index)
        #get_final_output(),
